/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthProfileImport } from './routes/_auth/profile'
import { Route as AuthTodoRouteImport } from './routes/_auth/todo/route'
import { Route as AuthAdminRouteImport } from './routes/_auth/_admin/route'
import { Route as AuthTodoIndexImport } from './routes/_auth/todo/index'
import { Route as AuthTodoCreateImport } from './routes/_auth/todo/create'
import { Route as AuthTodoIdImport } from './routes/_auth/todo/$id'

// Create/Update Routes

const LoginRouteRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthTodoRouteRoute = AuthTodoRouteImport.update({
  id: '/todo',
  path: '/todo',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthAdminRouteRoute = AuthAdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthTodoIndexRoute = AuthTodoIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthTodoRouteRoute,
} as any)

const AuthTodoCreateRoute = AuthTodoCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AuthTodoRouteRoute,
} as any)

const AuthTodoIdRoute = AuthTodoIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthTodoRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/_admin': {
      id: '/_auth/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthAdminRouteImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/todo': {
      id: '/_auth/todo'
      path: '/todo'
      fullPath: '/todo'
      preLoaderRoute: typeof AuthTodoRouteImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/todo/$id': {
      id: '/_auth/todo/$id'
      path: '/$id'
      fullPath: '/todo/$id'
      preLoaderRoute: typeof AuthTodoIdImport
      parentRoute: typeof AuthTodoRouteImport
    }
    '/_auth/todo/create': {
      id: '/_auth/todo/create'
      path: '/create'
      fullPath: '/todo/create'
      preLoaderRoute: typeof AuthTodoCreateImport
      parentRoute: typeof AuthTodoRouteImport
    }
    '/_auth/todo/': {
      id: '/_auth/todo/'
      path: '/'
      fullPath: '/todo/'
      preLoaderRoute: typeof AuthTodoIndexImport
      parentRoute: typeof AuthTodoRouteImport
    }
  }
}

// Create and export the route tree

interface AuthTodoRouteRouteChildren {
  AuthTodoIdRoute: typeof AuthTodoIdRoute
  AuthTodoCreateRoute: typeof AuthTodoCreateRoute
  AuthTodoIndexRoute: typeof AuthTodoIndexRoute
}

const AuthTodoRouteRouteChildren: AuthTodoRouteRouteChildren = {
  AuthTodoIdRoute: AuthTodoIdRoute,
  AuthTodoCreateRoute: AuthTodoCreateRoute,
  AuthTodoIndexRoute: AuthTodoIndexRoute,
}

const AuthTodoRouteRouteWithChildren = AuthTodoRouteRoute._addFileChildren(
  AuthTodoRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthAdminRouteRoute: typeof AuthAdminRouteRoute
  AuthTodoRouteRoute: typeof AuthTodoRouteRouteWithChildren
  AuthProfileRoute: typeof AuthProfileRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAdminRouteRoute: AuthAdminRouteRoute,
  AuthTodoRouteRoute: AuthTodoRouteRouteWithChildren,
  AuthProfileRoute: AuthProfileRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthAdminRouteRoute
  '/login': typeof LoginRouteRoute
  '/todo': typeof AuthTodoRouteRouteWithChildren
  '/profile': typeof AuthProfileRoute
  '/todo/$id': typeof AuthTodoIdRoute
  '/todo/create': typeof AuthTodoCreateRoute
  '/todo/': typeof AuthTodoIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthAdminRouteRoute
  '/login': typeof LoginRouteRoute
  '/profile': typeof AuthProfileRoute
  '/todo/$id': typeof AuthTodoIdRoute
  '/todo/create': typeof AuthTodoCreateRoute
  '/todo': typeof AuthTodoIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRouteRoute
  '/_auth/_admin': typeof AuthAdminRouteRoute
  '/_auth/todo': typeof AuthTodoRouteRouteWithChildren
  '/_auth/profile': typeof AuthProfileRoute
  '/_auth/todo/$id': typeof AuthTodoIdRoute
  '/_auth/todo/create': typeof AuthTodoCreateRoute
  '/_auth/todo/': typeof AuthTodoIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/todo'
    | '/profile'
    | '/todo/$id'
    | '/todo/create'
    | '/todo/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/profile' | '/todo/$id' | '/todo/create' | '/todo'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/_auth/_admin'
    | '/_auth/todo'
    | '/_auth/profile'
    | '/_auth/todo/$id'
    | '/_auth/todo/create'
    | '/_auth/todo/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/_admin",
        "/_auth/todo",
        "/_auth/profile"
      ]
    },
    "/login": {
      "filePath": "login/route.tsx"
    },
    "/_auth/_admin": {
      "filePath": "_auth/_admin/route.tsx",
      "parent": "/_auth"
    },
    "/_auth/todo": {
      "filePath": "_auth/todo/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/todo/$id",
        "/_auth/todo/create",
        "/_auth/todo/"
      ]
    },
    "/_auth/profile": {
      "filePath": "_auth/profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/todo/$id": {
      "filePath": "_auth/todo/$id.tsx",
      "parent": "/_auth/todo"
    },
    "/_auth/todo/create": {
      "filePath": "_auth/todo/create.tsx",
      "parent": "/_auth/todo"
    },
    "/_auth/todo/": {
      "filePath": "_auth/todo/index.tsx",
      "parent": "/_auth/todo"
    }
  }
}
ROUTE_MANIFEST_END */
